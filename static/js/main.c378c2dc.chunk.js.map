{"version":3,"sources":["serviceWorker.js","SignIn.js","index.js"],"names":["Boolean","window","location","hostname","match","Copyright","Typography","variant","color","align","Link","href","Date","getFullYear","useStyles","makeStyles","theme","body","backgroundColor","palette","common","white","paper","marginTop","spacing","display","flexDirection","alignItems","textAlign","avatar","margin","secondary","main","form","width","submit","createMuiTheme","typography","button","fontSize","fontFamily","h1","fontWeight","span","Dashboard","createHistory","Loadable","loader","loading","routing","default","exact","path","classes","history","useHistory","initialValues","email","password","onSubmit","values","setSubmitting","push","setTimeout","validationSchema","Yup","shape","required","min","props","handleChange","handleBlur","handleSubmit","Container","component","maxWidth","CssBaseline","className","Avatar","noValidate","validateOnBlur","validateOnChange","name","render","field","TextField","error","errors","touched","fullWidth","id","label","autoComplete","autoFocus","onChange","onBlur","helperText","String","type","FormControlLabel","control","Checkbox","value","Button","Grid","container","item","xs","Box","mt","withRouter","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c378c2dc.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport { Formik, Field } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction Copyright() {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      {'Copyright © '}\r\n      <Link color=\"inherit\" href=\"#\">\r\n      AgniShudhi\r\n      </Link>{' '}\r\n      {new Date().getFullYear()}\r\n      {'.'}\r\n    </Typography>\r\n  );\r\n}\r\n \r\nconst useStyles = makeStyles(theme => ({\r\n  '@global': {\r\n    body: {\r\n      backgroundColor: theme.palette.common.white,\r\n    },\r\n  },\r\n  paper: {\r\n    marginTop: theme.spacing(5),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    textAlign: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 8),\r\n  },\r\n}));\r\n \r\n\r\nexport default function SignIn() {\r\n  const classes = useStyles();\r\n  \r\n  let history = useHistory();\r\n  return (\r\n    <Formik\r\n    initialValues={{ email: '',password:'' }}\r\n    onSubmit={(values, { setSubmitting }) => {\r\n        //  alert(JSON.stringify(values, null, 2));\r\n      //   window.location.replace(\"/dashboard/createCluster/\")\r\n      history.push(\"/dashboard/GCListTeam/\")\r\n      setTimeout(() => {\r\n      \r\n      //  setSubmitting(false);\r\n      }, 500);\r\n    }}\r\n    validationSchema={Yup.object().shape({\r\n      email: Yup.string()\r\n        .email()\r\n        .required('Required email'),\r\n        password: Yup.string()\r\n        .required('No password provided.') \r\n        .min(1, 'Password is too short - should be 1 chars minimum.')\r\n    })}\r\n  >\r\n\r\n       {props => {\r\n        const {\r\n\r\n          handleChange,\r\n          handleBlur,\r\n          handleSubmit,\r\n        } = props;\r\n        return (\r\n            <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline />\r\n            <div className={classes.paper}>\r\n              <Avatar className={classes.avatar}>\r\n                <LockOutlinedIcon />\r\n              </Avatar>\r\n              <Typography component=\"h1\" variant=\"h5\">\r\n                Sign in\r\n              </Typography>\r\n              <form className={classes.form} noValidate onSubmit={handleSubmit} >\r\n              <Field\r\n    validateOnBlur\r\n    validateOnChange\r\n    name=\"email\"\r\n    render={({ field, form }) => (\r\n   \r\n    <TextField\r\n        error={\r\n            Boolean(form.errors.email && form.touched.email)\r\n        }\r\n        variant=\"outlined\"\r\n        margin=\"normal\"\r\n        required\r\n        fullWidth\r\n        id=\"email\"\r\n        label=\"Email Address\"\r\n        name=\"email\"\r\n        autoComplete=\"email\"\r\n        autoFocus\r\n        onChange={handleChange}\r\n        onBlur={handleBlur}\r\n        helperText={\r\n            form.errors.email &&\r\n            form.touched.email &&\r\n            String(form.errors.email)\r\n        }\r\n    />\r\n    )}\r\n/>\r\n<Field\r\n    validateOnBlur\r\n    validateOnChange\r\n    name=\"password\"\r\n    render={({ field, form }) => (\r\n    <TextField\r\n        error={\r\n            Boolean(form.errors.password && form.touched.password)\r\n        }\r\n        variant=\"outlined\"\r\n        margin=\"normal\"\r\n        required\r\n        fullWidth\r\n        name=\"password\"\r\n        label=\"Password\"\r\n        type=\"password\"\r\n        id=\"password\"\r\n        autoComplete=\"current-password\"\r\n        onChange={handleChange}\r\n        onBlur={handleBlur}\r\n        helperText={\r\n            form.errors.password &&\r\n            form.touched.password &&\r\n            String(form.errors.password)\r\n        }\r\n    />\r\n    )}\r\n/>\r\n                 \r\n                <FormControlLabel\r\n                  control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n                  label=\"Remember me\"\r\n                />\r\n                <Button\r\n                  type=\"submit\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.submit}\r\n                >\r\n                  Sign In\r\n                </Button>\r\n                <Grid container>\r\n                  <Grid item xs={12}>\r\n                    <Link href=\"#\" variant=\"body2\" align=\"center\" >\r\n                      Forgot password?\r\n                    </Link>\r\n                  </Grid>\r\n                 \r\n                </Grid>\r\n              </form>\r\n            </div>\r\n            <Box mt={8}>\r\n              <Copyright />\r\n            </Box>\r\n          </Container>\r\n        );\r\n      }}\r\n\r\n    </Formik>\r\n  );\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';import {\n   Router,\n  Switch,\n  Route,  withRouter, BrowserRouter,  HashRouter,\n} from \"react-router-dom\"; \n\nimport   Loadable  from 'react-loadable'; \nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\n\nimport { createBrowserHistory as createHistory } from 'history';\n\nimport SignIn from './SignIn';\nconst theme = createMuiTheme({\n \n    \"palette\": {\n      \"common\": {\n        \"black\": \"#000\",\n        \"white\": \"#fff\"\n      },\n      \"background\": {\n        \"paper\": \"#fff\",\n        \"default\": \"#fafafa\"\n      },\n      \"primary\": {\n        \"light\": \"#7986cb\",\n        \"main\": \"rgba(58, 110, 255, 1)\",\n        \"dark\": \"rgba(34, 72, 177, 1)\",\n        \"contrastText\": \"#fff\"\n      },\n      \"secondary\": {\n        \"light\": \"#3a6eff\",\n        \"main\": \"rgba(36, 153, 139, 1)\",\n        \"dark\": \"rgba(26, 134, 121, 1)\",\n        \"contrastText\": \"#fff\"\n      },\n      \"error\": {\n        \"light\": \"#e57373\",\n        \"main\": \"#f44336\",\n        \"dark\": \"#d32f2f\",\n        \"contrastText\": \"#fff\"\n      },\n      \"text\": {\n        \"primary\": \"rgba(0, 0, 0, 0.87)\",\n        \"secondary\": \"rgba(0, 0, 0, 0.54)\",\n        \"disabled\": \"rgba(0, 0, 0, 0.38)\",\n        \"hint\": \"rgba(0, 0, 0, 0.38)\"\n      },\n      \"varient\":{\n        \"outlined\": {\n          backgroundColor: \"red!important\"\n        } \n      }\n    },\n    typography: {\n      \"fontFamily\": \"\\\"Roboto\\\", \\\"Helvetica\\\", \\\"Arial\\\", sans-serif\",\n      \"fontSize\": 16,\n      \"fontWeightLight\": 300,\n      \"fontWeightRegular\": 400,\n      \"fontWeightMedium\": 500,\n      button: {\n        fontSize: '14px',\n        fontFamily:'Roboto',\n\n      },\n      \n      h1:{\n        fontWeight:\"normal\",\n        fontSize: '24px',\n    fontWeight: '400',\n      },\n      span:{\n        fontSize: '12px'\n      }\n    }\n});\nconst history = createHistory();\n \nconst Dashboard = Loadable({\n  loader: () => import(\"./dashboard\"),\n  loading: Loading  \n}); \n\nfunction Loading() {\n  return <h3>Loading...</h3>;\n}\nconst routing = (\n  <MuiThemeProvider theme={theme}>\n<HashRouter>\n  <Switch>\n          <Route default exact path=\"/\">\n            <SignIn />\n          </Route>\n          <Route path=\"/dashboard\" component ={withRouter(Dashboard)} >\n         \n          </Route> \n           \n        </Switch>\n      \n    </HashRouter>\n    </MuiThemeProvider>\n  )\n  ReactDOM.render(routing, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA    //  <Route path=\"/\" component ={SignIn} />\nserviceWorker.unregister();\n"],"sourceRoot":""}