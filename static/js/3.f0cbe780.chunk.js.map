{"version":3,"sources":["innerPages/GreenCluster/assignTeam.js"],"names":["DialogTitle","withStyles","makeStyles","props","classes","useStyles","children","onClose","other","disableTypography","className","root","variant","aria-label","closeButton","onClick","withRouter","console","log","open","React","useState","openTeam","setOpen","theme","useTheme","fullScreen","useMediaQuery","breakpoints","down","useHistory","id","handleDrawerClose","aria-labelledby","component","paddingLeft20","join","primary","orientation","initialValues","teamNumber","time","days","onSubmit","values","setSubmitting","alert","JSON","stringify","setTimeout","fromValues","json","parse","handleChange","index","validationSchema","Yup","shape","required","min","handleBlur","handleSubmit","maxWidth","paper","form","noValidate","validateOnBlur","validateOnChange","name","render","field","error","Boolean","errors","touched","margin","fullWidth","label","autoComplete","autoFocus","onChange","onBlur","helperText","String","arrayHelpers","Fragment","msg","type","max","InputLabelProps","shrink","defaultValue","inputProps","step","color","submit","mdUp","button"],"mappings":"iZAkCA,IAAMA,EAAcC,YAAWC,IAAXD,EAAuB,SAAAE,GAEzC,IAAIC,EAAUC,cACNC,EAAgCH,EAAhCG,SAAUC,EAAsBJ,EAAtBI,QAAYC,EAHoB,YAGVL,EAHU,wBAIlD,OACE,kBAAC,IAAD,eAAgBM,mBAAiB,EAACC,UAAWN,EAAQO,MAAUH,GAC7D,kBAAC,IAAD,CAAYI,QAAQ,MAAMN,GACzBC,EACC,kBAAC,IAAD,CAAYM,aAAW,QAAQH,UAAWN,EAAQU,YAAaC,QAASR,GACtE,kBAAC,IAAD,OAEA,SA8QKS,uBAxQf,SAA2Bb,GACzBc,QAAQC,IAAIf,EAAMgB,MADc,MAEJC,IAAMC,SAASlB,EAAMgB,MAFjB,mBAEzBG,EAFyB,KAEfC,EAFe,OAGHH,IAAMC,SAAS,KAHZ,gCAIAD,IAAMC,SAAS,KAJf,mBAK1BG,GAL0B,UAKlBC,eACRC,EAAaC,YAAcH,EAAMI,YAAYC,KAAK,OAElDzB,EAAUC,cAGhB,OAFcyB,cAGZ,6BAKE,kBAAC,IAAD,CAAQX,KAAMG,EAAUS,GAAG,wBAAwBxB,QAASJ,EAAM6B,kBAAmBC,kBAAgB,oBAAoBP,WAAYA,GAEnI,kBAAC,IAAD,CAAMQ,UAAU,MAAMxB,UAAWN,EAAQO,KAAME,aAAW,mBAExD,kBAAC,IAAD,CAAUH,UAAW,CAAC,mBAAqBN,EAAQ+B,eAAeC,KAAK,MACrE,yBAAK1B,UAAW,gBACd,kBAAC,IAAD,CAAcA,UAAW,eAAgB2B,QAAQ,QAGnD,kBAAC,IAAD,CAASC,YAAY,aACrB,yBAAK5B,UAAW,oBACd,kBAAC,IAAD,CAAc2B,QAAQ,WAAW3B,UAAW,wBAC5C,kBAAC,IAAD,CAAc2B,QAAQ,OAAO3B,UAAW,mCAO9C,kBAAC,IAAD,MACA,kBAACV,EAAD,CAAa+B,GAAG,oBAAoBrB,UAAWN,EAAQ+B,cAAgB,qBAAsB5B,QAASJ,EAAM6B,mBAA5G,sBAEA,kBAAC,IAAD,KAIE,kBAAC,IAAD,CACEO,cAAe,CACbC,WAAY,GACZC,KAAM,QACNC,KAAO,IAETC,SAAU,SAACC,EAAD,GAA+B,EAApBC,cAEnBC,MAAMC,KAAKC,UAAUJ,EAAQ,KAAM,IACnCK,YAAW,WACT1B,GAAQ,GACR,IAAI2B,EAAcH,KAAKC,UAAUJ,EAAQ,KAAM,GAEzCO,EAAOJ,KAAKK,MAAMF,GAC5BjC,QAAQC,IAAIiC,KAkBP,MAELE,aAAc,SAACT,EAAQU,GACrBrC,QAAQC,IAAI,SAEdqC,iBAAkBC,WAAaC,MAAM,CACnCjB,WAAYgB,WACTE,SAAS,wCACZhB,KAAMc,UAEHE,SAAS,2BACTC,IAAI,GACLlB,KAAMe,WACLE,SAAS,mCAOb,SAAAvD,GAOKA,EALFyC,OAFO,IAGPS,EAIElD,EAJFkD,aACAO,EAGEzD,EAHFyD,WACAC,EAEE1D,EAFF0D,aA+BF,OAEE,kBAAC,IAAD,CAAW3B,UAAU,OAAO4B,SAAS,MACnC,kBAAC,IAAD,MACA,yBAAKpD,UAAWN,EAAQ2D,OAEtB,0BAAMrD,UAAWN,EAAQ4D,KAAMC,YAAU,EAACtB,SAAUkB,GAClD,kBAAC,IAAD,CACEK,gBAAc,EACdC,kBAAgB,EAChBC,KAAK,aACLC,OAAQ,cAAGC,MAAH,IAAUN,EAAV,EAAUA,KAAV,OAEN,kBAAC,IAAD,CACEO,MACEC,QAAQR,EAAKS,OAAOjC,YAAcwB,EAAKU,QAAQlC,YAEjDmC,OAAO,SACPjB,UAAQ,EACRkB,WAAS,EACT7C,GAAG,aACH8C,MAAM,oBACNT,KAAK,aACLU,aAAa,aACbC,WAAS,EACTnE,QAAQ,WACRoE,SAAU3B,EACV4B,OAAQrB,EACRlD,UAAW,iBACXwE,WACElB,EAAKS,OAAOjC,YACZwB,EAAKU,QAAQlC,YACb2C,OAAOnB,EAAKS,OAAOjC,iBAK3B,kBAACxC,EAAD,CAAa+B,GAAG,oBAAoBrB,UAAW,mCAAoCH,QAASJ,EAAM6B,mBAAlG,OAEA,6BAEE,kBAAC,IAAD,CACEoC,KAAK,OACLC,OAAQ,cAAGe,aAAH,IAAgBpB,EAAhB,EAAgBA,KAAhB,OACN,kBAAC,IAAMqB,SAAP,WAAmB,kBAAC,IAAD,CAAcjB,KAAK,SACpC,SAAAkB,GAAG,OAAI,uBAAG5E,UAAW,sGAAuGqB,GAAG,oBAC/HuD,MAEA,kBAAC,IAAD,CAAcnF,MAAOA,EAAQyD,WAAY,kBAAMA,EAAWzD,EAAM6D,WAOxE,kBAAChE,EAAD,CAAa+B,GAAG,oBAAoBrB,UAAW,mCAAoCH,QAASJ,EAAM6B,mBAAlG,QAEA,kBAAC,IAAD,CACEkC,gBAAc,EACdC,kBAAgB,EAChBC,KAAK,OACLC,OAAQ,cAAGC,MAAH,IAAUN,EAAV,EAAUA,KAAV,OACN,kBAAC,IAAD,CACEO,MACEC,QAAQR,EAAKS,OAAOhC,MAAQuB,EAAKU,QAAQjC,MAE3CkC,OAAO,SACP5C,GAAG,OACH6C,WAAS,EACTR,KAAK,OACLS,MAAM,OACNU,KAAK,OACLT,aAAa,eACbE,SAAU3B,EACVM,IAAI,QAAQ6B,IAAI,QAChB5E,QAAQ,WACRqE,OAAQrB,EACR6B,gBAAiB,CACfC,QAAQ,GAEVC,aAAa,QACbC,WAAY,CACVC,KAAM,KAERX,WACElB,EAAKS,OAAOhC,MACZuB,EAAKU,QAAQjC,MACb0C,OAAOnB,EAAKS,OAAOhC,WAS3B,kBAAC,IAAD,KAEE,kBAAC,IAAD,CACE8C,KAAK,SACLX,WAAS,EACThE,QAAQ,YACRkF,MAAM,UACNpF,UAAWN,EAAQ2F,QALrB,UASA,kBAAC,IAAD,CAAQC,MAAI,GACV,kBAAC,IAAD,CACET,KAAK,SACLX,WAAS,EACThE,QAAQ,YACRkF,MAAM,YACNpF,UAAWN,EAAQ6F,OACnBlF,QAASZ,EAAM6B,mBANjB,YAtGN","file":"static/js/3.f0cbe780.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport { withRouter } from 'react-router-dom'\r\nimport Hidden from '@material-ui/core/Hidden';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport Container from '@material-ui/core/Container';\r\n\r\nimport { Formik, Form, Field, FieldArray, ErrorMessage  } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport DateSelector from '../../dateSelector';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useStyles } from '../../commonStyles';\r\nimport './greenCluster.css';\r\n\r\n\r\nfunction Loading() {\r\n  return <h3>Loading...</h3>;\r\n}\r\nconst DialogTitle = withStyles(makeStyles)(props => {\r\n\r\n  let classes = useStyles();\r\n  const { children, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\n\r\nfunction AssignFeederTeams(props) {\r\n  console.log(props.open);\r\n  const [openTeam, setOpen] = React.useState(props.open);\r\n  const [value, selectedDay] = React.useState(' ');\r\n  const [theArray, setTheArray] = React.useState([]);\r\n  const theme = useTheme(); \r\n  const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\r\n//console.log(props)\r\n  const classes = useStyles();\r\n  let history = useHistory();\r\n\r\n  return (\r\n    <div>\r\n\r\n\r\n\r\n\r\n      <Dialog open={openTeam} id=\"assignFeederTeamPopup\" onClose={props.handleDrawerClose} aria-labelledby=\"form-dialog-title\" fullScreen={fullScreen}\r\n      >\r\n        <List component=\"nav\" className={classes.root} aria-label=\"mailbox folders\">\r\n\r\n          <ListItem className={[\" flexWrapParent \" + classes.paddingLeft20].join(' ')} >\r\n            <div className={\" maxWidth84 \"}>\r\n              <ListItemText className={\" fontSize20 \"} primary=\"01\" />\r\n\r\n            </div>\r\n            <Divider orientation=\"vertical\" />\r\n            <div className={\" flexWrapParent \"} >\r\n              <ListItemText primary=\"Locality\" className={\" wrappedListItemTop\"} />\r\n              <ListItemText primary=\"Area\" className={\" wrappedListItem  greyText \"} />\r\n            </div>\r\n          </ListItem>\r\n\r\n\r\n\r\n        </List>\r\n        <Divider />\r\n        <DialogTitle id=\"form-dialog-title\" className={classes.paddingLeft20 + \" padding-bottom-0 \"} onClose={props.handleDrawerClose}>Assign Feeder Team</DialogTitle>\r\n\r\n        <DialogContent>\r\n\r\n        \r\n\r\n          <Formik\r\n            initialValues={{\r\n              teamNumber: '',\r\n              time: '07:30',\r\n              days : []\r\n            }}\r\n            onSubmit={(values, { setSubmitting }) => {\r\n\r\n              alert(JSON.stringify(values, null, 2));\r\n              setTimeout(() => {\r\n                setOpen(false);\r\n                let fromValues =  JSON.stringify(values, null, 2)\r\n \r\n                const json = JSON.parse(fromValues);\r\n            console.log(json) \r\n             let setDriverName= json;\r\n            //   props.handleDrawerTeamClose(setDriverName);\r\n     //           var FeederValues = \r\n               // props.match.params = JSON.stringify(values, null, 2);\r\n                //console.log( props.match.params)\r\n             //   props.feederTeamData = JSON.stringify(values, null, 2);\r\n        //        feederTeamData(JSON.stringify(values, null, 2)) \r\n             //   history.push(\"/dashboard/GreenClusters/\")\r\n                //  history.push({\r\n                //   pathname: '/dashboard/GCListTeam/', \r\n                //   state: { \r\n                //     FeederValues: JSON.stringify(values, null, 2) }\r\n               \r\n\r\n\r\n\r\n                //  setSubmitting(false);\r\n              }, 500);\r\n            }}\r\n            handleChange={(values, index) => {\r\n              console.log('this');\r\n            }}\r\n            validationSchema={Yup.object().shape({\r\n              teamNumber: Yup.string()\r\n                .required('Please provide a greencluster number'),\r\n              days: Yup.array()\r\n               \r\n                .required(\"Please at least one day\")\r\n                .min(1),\r\n                time: Yup.string()\r\n                .required('Please provide a valid time'),\r\n            })\r\n\r\n\r\n            }\r\n          >\r\n \r\n            {props => {\r\n              const {\r\n                values,\r\n                handleChange,\r\n                handleBlur,\r\n                handleSubmit,\r\n\r\n              } = props;\r\n              function addToSelectedDateList(day, index, e) {\r\n                  props.handleBlur()\r\n                if (props.values.days.indexOf(day) < 0) {\r\n                  props.values.days.push(day) \r\n                  setTheArray([...theArray, index]);   \r\n                }\r\n                else {\r\n                  props.values.days.pop(day)\r\n                 \r\n                  setTheArray(theArray.splice(index,1));  \r\n                  \r\n              //  \r\n                //  selectedDay(value => index); \r\n                    \r\n                }\r\n\r\n\r\n              };\r\n              function validatedays(props,form) {\r\n                let error;\r\n                console.log(props.errors.days)\r\n                form.errors.days = \" \";\r\n                props.isValidating = true;\r\n              //  if (value.days.length > 0) {\r\n                //   error = 'Nice try!';\r\n                // }\r\n                // return error;\r\n              }\r\n              return (\r\n\r\n                <Container component=\"main\" maxWidth=\"xs\">\r\n                  <CssBaseline />\r\n                  <div className={classes.paper}>\r\n\r\n                    <form className={classes.form} noValidate onSubmit={handleSubmit} >\r\n                      <Field\r\n                        validateOnBlur\r\n                        validateOnChange\r\n                        name=\"teamNumber\"\r\n                        render={({ field, form }) => (\r\n\r\n                          <TextField\r\n                            error={\r\n                              Boolean(form.errors.teamNumber && form.touched.teamNumber)\r\n                            }\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            id=\"teamNumber\"\r\n                            label=\"Enter Team Number\"\r\n                            name=\"teamNumber\"\r\n                            autoComplete=\"teamNumber\"\r\n                            autoFocus\r\n                            variant=\"outlined\"\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            className={\" margin-top-0 \"}\r\n                            helperText={\r\n                              form.errors.teamNumber &&\r\n                              form.touched.teamNumber &&\r\n                              String(form.errors.teamNumber)\r\n                            }\r\n                          />\r\n                        )}\r\n                      />\r\n                      <DialogTitle id=\"form-dialog-title\" className={\" padding-bottom-0 padding-left-0\"} onClose={props.handleDrawerClose}>Day</DialogTitle>\r\n\r\n                      <div>\r\n\r\n                        <FieldArray\r\n                          name=\"days\"\r\n                          render={({ arrayHelpers,form,  }) => (\r\n                            <React.Fragment>   <ErrorMessage name=\"days\"  >\r\n                             {msg => <p className={\" MuiFormHelperText-root MuiFormHelperText-contained Mui-error Mui-required  MuiFormHelperText-root \"} id=\"days-helper-text\">\r\n                             {msg}</p>  }</ErrorMessage>\r\n                         \r\n                              <DateSelector props={props}  handleBlur={() => handleBlur(props,form)}  />\r\n                             </React.Fragment> \r\n                          \r\n                          )}\r\n                        />\r\n          \r\n                      </div>\r\n                      <DialogTitle id=\"form-dialog-title\" className={\" padding-bottom-0 padding-left-0\"} onClose={props.handleDrawerClose}>Time</DialogTitle>\r\n\r\n                      <Field\r\n                        validateOnBlur\r\n                        validateOnChange\r\n                        name=\"time\"\r\n                        render={({ field, form }) => (\r\n                          <TextField\r\n                            error={\r\n                              Boolean(form.errors.time && form.touched.time)\r\n                            }\r\n                            margin=\"normal\"\r\n                            id=\"time\"\r\n                            fullWidth\r\n                            name=\"time\"\r\n                            label=\"Time\"\r\n                            type=\"time\"\r\n                            autoComplete=\"current-area\"\r\n                            onChange={handleChange}\r\n                            min=\"07:00\" max=\"18:00\" \r\n                            variant=\"outlined\"\r\n                            onBlur={handleBlur}\r\n                            InputLabelProps={{\r\n                              shrink: true,\r\n                            }}\r\n                            defaultValue=\"07:30\" \r\n                            inputProps={{\r\n                              step: 300, // 5 min\r\n                            }}\r\n                            helperText={\r\n                              form.errors.time &&\r\n                              form.touched.time &&\r\n                              String(form.errors.time)\r\n                            }\r\n                          />\r\n                        )}\r\n                      />\r\n\r\n\r\n\r\n\r\n                      <DialogActions>\r\n\r\n                        <Button\r\n                          type=\"submit\"\r\n                          fullWidth\r\n                          variant=\"contained\"\r\n                          color=\"primary\"\r\n                          className={classes.submit}\r\n                        >\r\n                          ASSIGN\r\n     </Button>\r\n                        <Hidden mdUp>\r\n                          <Button\r\n                            type=\"button\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"secondary\"\r\n                            className={classes.button}\r\n                            onClick={props.handleDrawerClose}\r\n                          >\r\n                            CANCEL\r\n     </Button>\r\n                        </Hidden>\r\n                      </DialogActions>   </form>\r\n                  </div>\r\n                </Container>\r\n              );\r\n            }}\r\n\r\n          </Formik>\r\n        </DialogContent>\r\n\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(AssignFeederTeams)"],"sourceRoot":""}